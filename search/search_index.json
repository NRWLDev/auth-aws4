{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p><code>auth-aws4</code> aims to be a usecase agnostic implementation of AWS4 Sig v4, as such it accepts the component pieces of a request rather than a full opinionated request object like <code>httpx.Request</code>.</p> <p>https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html</p>"},{"location":"custom/","title":"Custom Signing Algorithms","text":"<p><code>auth-aws4</code> supports deviating from <code>AWS4-HMAX-SHA256</code> and <code>x-amz</code> headers if you with to support a custom algorithm.</p>"},{"location":"custom/#signing","title":"Signing","text":"<pre><code>from datetime import datetime, timezone\n\nimport aws4\n\n\nservice = \"s3\"\nregion = \"us-east-1\"\naccess_key_id = \"my-access-key-id\"\nsecret_access_key = \"my-secret-access-key\"\n\nCustomAuthSchema = aws4.AuthSchema(\"CUSTOM4-HMAC-SHA256\", \"x-custom\")\n\n\ndef custom_auth(request: httpx.Request):\n    dt = datetime.now(tz=timezone.utc)\n    request.headers[\"x-amz-date\"] = aws4.to_amz_date(dt)\n    request.headers[\"host\"] = request.url.netloc.decode(\"utf-8\")\n\n    body = request.content.decode(\"utf-8\")\n    if body:\n        request.headers[\"Content-Length\"] = str(len(body))\n\n    aws4.sign_request(\n        service,\n        request.method,\n        str(request.url),\n        region,\n        request.headers,\n        body,\n        access_key_id,\n        secret_access_key,\n        dt,\n        CustomAuthSchema,\n    )\n\n\nwith httpx.Client() as client:\n    r = client.request(\n        url=\"http://localhost\",\n        auth=custom_auth,\n    )\n</code></pre>"},{"location":"custom/#validation","title":"Validation","text":"<p>Server side the validation can support both <code>AWS4</code> and a custom algorithm, or just a custom algorithm.</p>"},{"location":"custom/#aws4-and-custom-validation","title":"AWS4 and Custom validation","text":"<pre><code>from aws4 import generate_challenge, validate_challenge\n\nCustomAuthSchema = aws4.AuthSchema(\"CUSTOM4-HMAC-SHA256\", \"x-custom\")\n\n\ndef fetch_secret_access_key(access_key_id) -&gt; str:\n    return \"my-secret-access-key\"\n\n\nchallenge = generate_challenge(\n    method=request.method,\n    url=request.url,\n    headers=request.headers,\n    content=request.content,\n    supported_schemas=[aws4.AWSAuthSchema, CustomAuthSchema],\n)\n\nsecret_access_key = fetch_access_key(challenge.access_key_id)\n\nvalidate_challenge(\n    challenge,\n    secret_access_key,\n    supported_schemas=[aws4.AWSAuthSchema, CustomAuthSchema],\n)\n</code></pre>"},{"location":"custom/#without-support-for-aws4","title":"Without support for AWS4","text":"<pre><code>from aws4 import generate_challenge, validate_challenge\n\nCustomAuthSchema = aws4.AuthSchema(\"CUSTOM4-HMAC-SHA256\", \"x-custom\")\n\n\ndef fetch_secret_access_key(access_key_id) -&gt; str:\n    return \"my-secret-access-key\"\n\n\nchallenge = generate_challenge(\n    method=request.method,\n    url=request.url,\n    headers=request.headers,\n    content=request.content,\n    supported_schemas=[CustomAuthSchema],\n)\n\nsecret_access_key = fetch_access_key(challenge.access_key_id)\n\nvalidate_challenge(\n    challenge,\n    secret_access_key,\n    supported_schemas=[CustomAuthSchema],\n)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>For usage examples I will be using <code>httpx</code>, but any other python request library should be similar.</p>"},{"location":"usage/#validation","title":"Validation","text":"<pre><code>from aws4 import generate_challenge, validate_challenge\n\ndef fetch_secret_access_key(access_key_id) -&gt; str:\n    return \"my-secret-access-key\"\n\n\nchallenge = generate_challenge(\n    method=request.method,\n    url=request.url,\n    headers=request.headers,\n    content=request.content,\n)\n\nsecret_access_key = fetch_access_key(challenge.access_key_id)\n\nvalidate_challenge(challenge, secret_access_key)\n</code></pre>"},{"location":"usage/#signing","title":"Signing","text":"<p>An example of an httpx AWS4 request signing. As part of the sign_request method the <code>Authorization</code> header is injected into <code>request.headers</code></p> <pre><code>from datetime import datetime, timezone\n\nimport aws4\n\n\nservice = \"s3\"\nregion = \"us-east-1\"\naccess_key_id = \"my-access-key-id\"\nsecret_access_key = \"my-secret-access-key\"\n\ndef http_aws4_auth(request: httpx.Request):\n    dt = datetime.now(tz=timezone.utc)\n    request.headers[\"x-amz-date\"] = aws4.to_amz_date(dt)\n    request.headers[\"host\"] = request.url.netloc.decode(\"utf-8\")\n\n    body = request.content.decode(\"utf-8\")\n    if body:\n        request.headers[\"Content-Length\"] = str(len(body))\n\n    aws4.sign_request(\n        service,\n        request.method,\n        request.url,\n        region,\n        request.headers,\n        body,\n        access_key_id,\n        secret_access_key,\n        dt,\n    )\n\nwith httpx.Client() as client:\n    r = client.request(\n        url=\"http://localhost\",\n        auth=http_aws4_auth,\n    )\n</code></pre>"},{"location":"usage/#generate-user-keys","title":"Generate user keys","text":"<p>To generate user key pairs, <code>aws4.key_pair</code> provides some helpful utility functions.</p> <pre><code>import aws4.key_pair\n\nkey_pair = aws4.key_pair.generate_key_pair()\n\nak = key_pair.access_key_id\nsk = key_pair.secret_access_key\n</code></pre>"}]}